{
	// Place your snippets for cpp here. Each snippet is defined under a snippet name and has a prefix, body and 
	// description. The prefix is what is used to trigger the snippet and the body will be expanded and inserted. Possible variables are:
	// $1, $2 for tab stops, $0 for the final cursor position, and ${1:label}, ${2:another} for placeholders. Placeholders with the 
	// same ids are connected.
	// Example:
	 "cpp-boilerplate": {
		"prefix": "cpp",
	 	"body": [
			"// ੴ Jai Guruji ॐ",
			" ",
			"#include <bits/stdc++.h>"
			"using namespace std; ",
			" ",
			"#define fastio() ios_base::sync_with_stdio(false);cin.tie(NULL);cout.tie(NULL)",
			"#define int long long",
			"#define ll long long int ",
			"#define vi vector<int>",
			"#define mod 1000000007",
			"#define PI 3.1415926535897932384626",
			"#define setbits(x) __builtin_popcountll(x)", 
			"#define zerobits(x) __builtin_ctzll(x) // counts the trailing zeros",
			"#define INF 1e18",
			" ",
			"signed main() {\n\tfastio();",
			"\tauto begin = std::chrono::high_resolution_clock::now();"
			" ",
			"\tint t;",
			"\tcin>>t;",
			"\tfor(int i = 0; i < t; i++){",
			"\t\t$1",
			"\t}",
			" ",
			"\tauto end = std::chrono::high_resolution_clock::now();",
			"\tauto elapsed = std::chrono::duration_cast<std::chrono::nanoseconds>(end-begin);"
			"//\tcout << \"Time measured: \" << setprecision(3) << fixed << (elapsed.count() * 1e-9) << \"seconds\" << endl;"
			" ",
			"}",

	 	],
	 	"description": "CPP program"
	 }
}
